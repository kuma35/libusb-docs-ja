# -*- coding: utf-8 -*-
# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR libusb
# This file is distributed under the same license as the libusb package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: libusb-api-doc 1.0\n"
"POT-Creation-Date: 2021-07-09 02:36+0900\n"
"PO-Revision-Date: 2021-07-09 04:09+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><head><title>
#: source/api-1.0/libusb_caveats.html:8
msgid "libusb: Caveats"
msgstr "libusb: 警告"

#. type: Attribute 'alt' of: <html><body><div><div><table><tbody><tr><td><img>
#: source/api-1.0/libusb_caveats.html:20
msgid "Logo"
msgstr "Logo"

#. type: Content of: <html><body><div><div><table><tbody><tr><td><div>
#: source/api-1.0/libusb_caveats.html:22
msgid "libusb &#160;<span id=\"projectnumber\">1.0.24</span>"
msgstr "libusb &#160;<span id=\"projectnumber\">1.0.24</span>"

#. type: Content of: <html><body><div><div><table><tbody><tr><td><div>
#: source/api-1.0/libusb_caveats.html:25
msgid "A cross-platform user library to access USB devices"
msgstr "USBデバイスにアクセスするためのクロス・プラットフォームのユーザー・ライブラリ"

#. type: Content of: <html><body><div><script>
#: source/api-1.0/libusb_caveats.html:36
msgid ""
"/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;"
"dn=gpl-2.0.txt GPL-v2 */ $(function() { initMenu('',false,false,'search."
"php','Search'); }); /* @license-end */"
msgstr "/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */ $(function() { initMenu('',false,false,'search.php','Search'); }); /* @license-end */"

#. type: Content of: <html><body><div><div><div><div>
#: source/api-1.0/libusb_caveats.html:45
msgid "Caveats"
msgstr "警告"

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:48
msgid "<a class=\"anchor\" id=\"threadsafety\"></a> Thread safety"
msgstr "<a class=\"anchor\" id=\"threadsafety\"></a>スレッド・セーフ"

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:50
msgid ""
"libusb is designed to be completely thread-safe, but as with any API it "
"cannot prevent a user from sabotaging themselves, either intentionally or "
"otherwise."
msgstr "libusbは完全にスレッド・セーフになるように設計されていますが、他のAPIと同様に、意図的であろうとなかろうと、ユーザーが自分自身で妨害するのを防ぐことはできません。"

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:51
msgid "Observe the following general guidelines:"
msgstr "以下の一般的なガイドラインに従ってください:"

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:53
msgid ""
"Calls to functions that release a resource (e.g. <a class=\"el\" href="
"\"group__libusb__dev.html#ga779bc4f1316bdb0ac383bddbd538620e"
"\">libusb_close()</a>, <a class=\"el\" href=\"group__libusb__desc."
"html#ga18d2b08a065857ff7ae4f3f719c115cc\">libusb_free_config_descriptor()</"
"a>) should not be called concurrently on the same resource. This is no "
"different than concurrently calling free() on the same allocated pointer."
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:54
msgid ""
"Each individual <a class=\"el\" href=\"structlibusb__transfer.html"
"\">libusb_transfer</a> should be prepared by a single thread. In other "
"words, no two threads should ever be concurrently filling out the fields of "
"a <a class=\"el\" href=\"structlibusb__transfer.html\">libusb_transfer</a>. "
"You can liken this to calling sprintf() with the same destination buffer "
"from multiple threads. The results will likely not be what you want unless "
"the input parameters are all the same, but its best to avoid this situation "
"entirely."
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:55
msgid ""
"Both the <a class=\"el\" href=\"structlibusb__transfer.html"
"\">libusb_transfer</a> structure and its associated data buffer should not "
"be accessed between the time the transfer is submitted and the time the "
"completion callback is invoked. You can think of \"ownership\" of these "
"things as being transferred to libusb while the transfer is active."
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:56
msgid ""
"The various \"setter\" functions (e.g. <a class=\"el\" href="
"\"group__libusb__lib."
"html#ga2efb66b8f16ffb0851f3907794c06e20\">libusb_set_log_cb()</a>, <a class="
"\"el\" href=\"group__libusb__poll."
"html#ga1b7b2deb193f2e9ffda5e727361d7e67\">libusb_set_pollfd_notifiers()</a>) "
"should not be called concurrently on the resource. Though doing so will not "
"lead to any undefined behavior, it will likely produce results that the "
"application does not expect."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:58
msgid ""
"Rules for multiple threads and asynchronous I/O are detailed <a class=\"el\" "
"href=\"libusb_mtasync.html\">here</a>."
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:59
msgid "<a class=\"anchor\" id=\"fork\"></a> Fork considerations"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:61
msgid ""
"libusb is <em>not</em> designed to work across fork() calls. Depending on "
"the platform, there may be resources in the parent process that are not "
"available to the child (e.g. the hotplug monitor thread on Linux). In "
"addition, since the parent and child will share libusb's internal file "
"descriptors, using libusb in any way from the child could cause the parent "
"process's <a class=\"el\" href=\"group__libusb__lib."
"html#ga4ec088aa7b79c4a9599e39bf36a72833\">libusb_context</a> to get into an "
"inconsistent state."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:62
msgid ""
"On Linux, libusb's file descriptors will be marked as CLOEXEC, which means "
"that it is safe to fork() and exec() without worrying about the child "
"process needing to clean up state or having access to these file "
"descriptors. Other platforms may not be so forgiving, so consider yourself "
"warned!"
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:63
msgid "<a class=\"anchor\" id=\"devresets\"></a> Device resets"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:65
msgid ""
"The <a class=\"el\" href=\"group__libusb__dev."
"html#gafee9c4638f1713ca5faa867948878111\">libusb_reset_device()</a> function "
"allows you to reset a device. If your program has to call such a function, "
"it should obviously be aware that the reset will cause device state to "
"change (e.g. register values may be reset)."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:66
msgid ""
"The problem is that any other program could reset the device your program is "
"working with, at any time. libusb does not offer a mechanism to inform you "
"when this has happened, so if someone else resets your device it will not be "
"clear to your own program why the device state has changed."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:67
msgid ""
"Ultimately, this is a limitation of writing drivers in user space. "
"Separation from the USB stack in the underlying kernel makes it difficult "
"for the operating system to deliver such notifications to your program. The "
"Linux kernel USB stack allows such reset notifications to be delivered to in-"
"kernel USB drivers, but it is not clear how such notifications could be "
"delivered to second-class drivers that live in user space."
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:68
msgid "<a class=\"anchor\" id=\"blockonly\"></a> Blocking-only functionality"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:70
msgid ""
"The functionality listed below is only available through synchronous, "
"blocking functions. There are no asynchronous/non-blocking alternatives, and "
"no clear ways of implementing these."
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:72
msgid ""
"Configuration activation (<a class=\"el\" href=\"group__libusb__dev."
"html#ga785ddea63a2b9bcb879a614ca4867bed\">libusb_set_configuration()</a>)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:73
msgid ""
"Interface/alternate setting activation (<a class=\"el\" href="
"\"group__libusb__dev.html#ga4858ad4f0f58fd1dc0afaead1fe6479a"
"\">libusb_set_interface_alt_setting()</a>)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:74
msgid ""
"Releasing of interfaces (<a class=\"el\" href=\"group__libusb__dev."
"html#ga49b5cb0d894f6807cd1693ef29aecbfa\">libusb_release_interface()</a>)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:75
msgid ""
"Clearing of halt/stall condition (<a class=\"el\" href=\"group__libusb__dev."
"html#gab794bbc0b055d140f186f5a4d39c0891\">libusb_clear_halt()</a>)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:76
msgid ""
"Device resets (<a class=\"el\" href=\"group__libusb__dev."
"html#gafee9c4638f1713ca5faa867948878111\">libusb_reset_device()</a>)"
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:78
msgid ""
"<a class=\"anchor\" id=\"configsel\"></a> Configuration selection and "
"handling"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:80
msgid ""
"When libusb presents a device handle to an application, there is a chance "
"that the corresponding device may be in unconfigured state. For devices with "
"multiple configurations, there is also a chance that the configuration "
"currently selected is not the one that the application wants to use."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:81
msgid ""
"The obvious solution is to add a call to <a class=\"el\" href="
"\"group__libusb__dev.html#ga785ddea63a2b9bcb879a614ca4867bed"
"\">libusb_set_configuration()</a> early on during your device initialization "
"routines, but there are caveats to be aware of:"
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:82
msgid ""
"If the device is already in the desired configuration, calling <a class=\"el"
"\" href=\"group__libusb__dev.html#ga785ddea63a2b9bcb879a614ca4867bed"
"\">libusb_set_configuration()</a> using the same configuration value will "
"cause a lightweight device reset. This may not be desirable behaviour."
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:83
msgid ""
"In the case where the desired configuration is already active, libusb may "
"not even be able to perform a lightweight device reset. For example, take my "
"USB keyboard with fingerprint reader: I'm interested in driving the "
"fingerprint reader interface through libusb, but the kernel's USB-HID driver "
"will almost always have claimed the keyboard interface. Because the kernel "
"has claimed an interface, it is not even possible to perform the lightweight "
"device reset, so <a class=\"el\" href=\"group__libusb__dev."
"html#ga785ddea63a2b9bcb879a614ca4867bed\">libusb_set_configuration()</a> "
"will fail. (Luckily the device in question only has a single configuration.)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:84
msgid ""
"libusb will be unable to set a configuration if other programs or drivers "
"have claimed interfaces. In particular, this means that kernel drivers must "
"be detached from all the interfaces before <a class=\"el\" href="
"\"group__libusb__dev.html#ga785ddea63a2b9bcb879a614ca4867bed"
"\">libusb_set_configuration()</a> may succeed."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:86
msgid ""
"One solution to some of the above problems is to consider the currently "
"active configuration. If the configuration we want is already active, then "
"we don't have to select any configuration:"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: source/api-1.0/libusb_caveats.html:86
msgid "cfg = -1;"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: source/api-1.0/libusb_caveats.html:87
msgid ""
"<a class=\"code\" href=\"group__libusb__dev."
"html#gae921014b888b105471a31d54c77c1c4d\">libusb_get_configuration</a>(dev, "
"&amp;cfg);"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: source/api-1.0/libusb_caveats.html:88
msgid "<span class=\"keywordflow\">if</span> (cfg != desired)"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: source/api-1.0/libusb_caveats.html:89
msgid ""
"<a class=\"code\" href=\"group__libusb__dev."
"html#ga785ddea63a2b9bcb879a614ca4867bed\">libusb_set_configuration</a>(dev, "
"desired);"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:90
msgid ""
"This is probably suitable for most scenarios, but is inherently racy: "
"another application or driver may change the selected configuration "
"<em>after</em> the <a class=\"el\" href=\"group__libusb__dev."
"html#gae921014b888b105471a31d54c77c1c4d\">libusb_get_configuration()</a> "
"call."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:91
msgid ""
"Even in cases where <a class=\"el\" href=\"group__libusb__dev."
"html#ga785ddea63a2b9bcb879a614ca4867bed\">libusb_set_configuration()</a> "
"succeeds, consider that other applications or drivers may change "
"configuration after your application calls <a class=\"el\" href="
"\"group__libusb__dev.html#ga785ddea63a2b9bcb879a614ca4867bed"
"\">libusb_set_configuration()</a>."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:92
msgid ""
"One possible way to lock your device into a specific configuration is as "
"follows:"
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:93
msgid ""
"Set the desired configuration (or use the logic above to realise that it is "
"already in the desired configuration)"
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:94
msgid "Claim the interface that you wish to use"
msgstr ""

#. type: Content of: <html><body><div><div><div><ol><li>
#: source/api-1.0/libusb_caveats.html:95
msgid ""
"Check that the currently active configuration is the one that you want to "
"use."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:97
msgid ""
"The above method works because once an interface is claimed, no application "
"or driver is able to select another configuration."
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:98
msgid "<a class=\"anchor\" id=\"earlycomp\"></a> Early transfer completion"
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:100
msgid ""
"NOTE: This section is currently Linux-centric. I am not sure if any of these "
"considerations apply to Darwin or other platforms."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:101
msgid ""
"When a transfer completes early (i.e. when less data is received/sent in any "
"one packet than the transfer buffer allows for) then libusb is designed to "
"terminate the transfer immediately, not transferring or receiving any more "
"data unless other transfers have been queued by the user."
msgstr ""

#. type: Content of: <html><body><div><div><div><p>
#: source/api-1.0/libusb_caveats.html:102
msgid ""
"On legacy platforms, libusb is unable to do this in all situations. After "
"the incomplete packet occurs, \"surplus\" data may be transferred. For "
"recent versions of libusb, this information is kept (the data length of the "
"transfer is updated) and, for device-to-host transfers, any surplus data was "
"added to the buffer. Still, this is not a nice solution because it loses the "
"information about the end of the short packet, and the user probably wanted "
"that surplus data to arrive in the next logical transfer."
msgstr ""

#. type: Content of: <html><body><div><div><div><h1>
#: source/api-1.0/libusb_caveats.html:103
msgid "<a class=\"anchor\" id=\"zlp\"></a> Zero length packets"
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:106
msgid ""
"libusb is able to send a packet of zero length to an endpoint simply by "
"submitting a transfer of zero length."
msgstr ""

#. type: Content of: <html><body><div><div><div><ul><li>
#: source/api-1.0/libusb_caveats.html:107
msgid ""
"The <a class=\"el\" href=\"group__libusb__asyncio."
"html#gga1fb47dd0f7c209b60a3609ff0c03d56da26b66334b6ec0537c49841ca623d901f"
"\">LIBUSB_TRANSFER_ADD_ZERO_PACKET</a> flag is currently only supported on "
"Linux."
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:111
msgid ""
"<a href=\"group__libusb__dev.html#ga785ddea63a2b9bcb879a614ca4867bed"
"\">libusb_set_configuration</a>"
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:111
msgid ""
"int libusb_set_configuration(libusb_device_handle *dev_handle, int "
"configuration)"
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:111
msgid "<b>Definition:</b> core.c:1619"
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:112
msgid ""
"<a href=\"group__libusb__dev.html#gae921014b888b105471a31d54c77c1c4d"
"\">libusb_get_configuration</a>"
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:112
msgid ""
"int libusb_get_configuration(libusb_device_handle *dev_handle, int *config)"
msgstr ""

#. type: Content of: <html><body><div><div>
#: source/api-1.0/libusb_caveats.html:112
msgid "<b>Definition:</b> core.c:1533"
msgstr ""

#. type: Content of: <html><body><address><small><a>
#: source/api-1.0/libusb_caveats.html:114
msgid ""
"<small> Generated on Fri Jul 9 2021 02:35:39 for libusb by &#160;<a href="
"\"http://www.doxygen.org/index.html\">"
msgstr "<small> Generated on Fri Jul 9 2021 02:35:39 for libusb by &#160;<a href=\"http://www.doxygen.org/index.html\">"

#. type: Attribute 'alt' of: <html><body><address><small><a><img>
#: source/api-1.0/libusb_caveats.html:116
msgid "doxygen"
msgstr "doxygen"

#. type: Content of: <html><body><address>
#: source/api-1.0/libusb_caveats.html:117
msgid "</a> 1.8.17 </small>"
msgstr "</a> 1.8.17 </small>"
